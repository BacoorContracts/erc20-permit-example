/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace ReceiptUtil {
  export type UserStruct = {
    addr: PromiseOrValue<string>;
    v: PromiseOrValue<BigNumberish>;
    deadline: PromiseOrValue<BigNumberish>;
    r: PromiseOrValue<BytesLike>;
    s: PromiseOrValue<BytesLike>;
  };

  export type UserStructOutput = [string, number, BigNumber, string, string] & {
    addr: string;
    v: number;
    deadline: BigNumber;
    r: string;
    s: string;
  };

  export type HeaderStruct = {
    buyer: ReceiptUtil.UserStruct;
    seller: ReceiptUtil.UserStruct;
    nftContract: PromiseOrValue<string>;
    paymentToken: PromiseOrValue<string>;
  };

  export type HeaderStructOutput = [
    ReceiptUtil.UserStructOutput,
    ReceiptUtil.UserStructOutput,
    string,
    string
  ] & {
    buyer: ReceiptUtil.UserStructOutput;
    seller: ReceiptUtil.UserStructOutput;
    nftContract: string;
    paymentToken: string;
  };

  export type ItemStruct = {
    amount: PromiseOrValue<BigNumberish>;
    tokenId: PromiseOrValue<BigNumberish>;
    unitPrice: PromiseOrValue<BigNumberish>;
    tokenURI: PromiseOrValue<string>;
  };

  export type ItemStructOutput = [BigNumber, BigNumber, BigNumber, string] & {
    amount: BigNumber;
    tokenId: BigNumber;
    unitPrice: BigNumber;
    tokenURI: string;
  };

  export type ReceiptStruct = {
    header: ReceiptUtil.HeaderStruct;
    item: ReceiptUtil.ItemStruct;
    nonce: PromiseOrValue<BigNumberish>;
    deadline: PromiseOrValue<BigNumberish>;
  };

  export type ReceiptStructOutput = [
    ReceiptUtil.HeaderStructOutput,
    ReceiptUtil.ItemStructOutput,
    BigNumber,
    BigNumber
  ] & {
    header: ReceiptUtil.HeaderStructOutput;
    item: ReceiptUtil.ItemStructOutput;
    nonce: BigNumber;
    deadline: BigNumber;
  };

  export type BulkStruct = {
    amounts: PromiseOrValue<BigNumberish>[];
    tokenIds: PromiseOrValue<BigNumberish>[];
    unitPrices: PromiseOrValue<BigNumberish>[];
    tokenURIs: PromiseOrValue<string>[];
  };

  export type BulkStructOutput = [
    BigNumber[],
    BigNumber[],
    BigNumber[],
    string[]
  ] & {
    amounts: BigNumber[];
    tokenIds: BigNumber[];
    unitPrices: BigNumber[];
    tokenURIs: string[];
  };

  export type BulkReceiptStruct = {
    header: ReceiptUtil.HeaderStruct;
    bulk: ReceiptUtil.BulkStruct;
    nonce: PromiseOrValue<BigNumberish>;
    deadline: PromiseOrValue<BigNumberish>;
  };

  export type BulkReceiptStructOutput = [
    ReceiptUtil.HeaderStructOutput,
    ReceiptUtil.BulkStructOutput,
    BigNumber,
    BigNumber
  ] & {
    header: ReceiptUtil.HeaderStructOutput;
    bulk: ReceiptUtil.BulkStructOutput;
    nonce: BigNumber;
    deadline: BigNumber;
  };
}

export interface MarketplaceInterface extends utils.Interface {
  functions: {
    "VERSION()": FunctionFragment;
    "admin()": FunctionFragment;
    "initialize(address,uint256)": FunctionFragment;
    "nonces(address)": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "redeem((((address,uint8,uint256,bytes32,bytes32),(address,uint8,uint256,bytes32,bytes32),address,address),(uint256,uint256,uint256,string),uint256,uint256),bytes)": FunctionFragment;
    "redeemBulk((((address,uint8,uint256,bytes32,bytes32),(address,uint8,uint256,bytes32,bytes32),address,address),(uint256[],uint256[],uint256[],string[]),uint256,uint256),bytes)": FunctionFragment;
    "serviceFeeNumerator()": FunctionFragment;
    "unpause()": FunctionFragment;
    "updateGovernance(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "VERSION"
      | "admin"
      | "initialize"
      | "nonces"
      | "pause"
      | "paused"
      | "redeem"
      | "redeemBulk"
      | "serviceFeeNumerator"
      | "unpause"
      | "updateGovernance"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "nonces",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [ReceiptUtil.ReceiptStruct, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemBulk",
    values: [ReceiptUtil.BulkReceiptStruct, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "serviceFeeNumerator",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateGovernance",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeemBulk", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "serviceFeeNumerator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateGovernance",
    data: BytesLike
  ): Result;

  events: {
    "BulkRedeemed(address,address,uint256[],address,uint256)": EventFragment;
    "GovernanceUpdated(address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "ItemRedeemed(address,address,uint256,address,uint256)": EventFragment;
    "Paused(address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BulkRedeemed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GovernanceUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemRedeemed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface BulkRedeemedEventObject {
  nftContract: string;
  buyer: string;
  tokenIds: BigNumber[];
  paymentToken: string;
  total: BigNumber;
}
export type BulkRedeemedEvent = TypedEvent<
  [string, string, BigNumber[], string, BigNumber],
  BulkRedeemedEventObject
>;

export type BulkRedeemedEventFilter = TypedEventFilter<BulkRedeemedEvent>;

export interface GovernanceUpdatedEventObject {
  newAddr: string;
}
export type GovernanceUpdatedEvent = TypedEvent<
  [string],
  GovernanceUpdatedEventObject
>;

export type GovernanceUpdatedEventFilter =
  TypedEventFilter<GovernanceUpdatedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface ItemRedeemedEventObject {
  nftContract: string;
  buyer: string;
  tokenId: BigNumber;
  paymentToken: string;
  total: BigNumber;
}
export type ItemRedeemedEvent = TypedEvent<
  [string, string, BigNumber, string, BigNumber],
  ItemRedeemedEventObject
>;

export type ItemRedeemedEventFilter = TypedEventFilter<ItemRedeemedEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface Marketplace extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MarketplaceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    VERSION(overrides?: CallOverrides): Promise<[string]>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      admin_: PromiseOrValue<string>,
      serviceFeeNumerator_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    nonces(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _value: BigNumber }>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    redeem(
      receipt_: ReceiptUtil.ReceiptStruct,
      signature_: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    redeemBulk(
      receipt_: ReceiptUtil.BulkReceiptStruct,
      signature_: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    serviceFeeNumerator(overrides?: CallOverrides): Promise<[BigNumber]>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateGovernance(
      addr_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  VERSION(overrides?: CallOverrides): Promise<string>;

  admin(overrides?: CallOverrides): Promise<string>;

  initialize(
    admin_: PromiseOrValue<string>,
    serviceFeeNumerator_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  nonces(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  redeem(
    receipt_: ReceiptUtil.ReceiptStruct,
    signature_: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  redeemBulk(
    receipt_: ReceiptUtil.BulkReceiptStruct,
    signature_: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  serviceFeeNumerator(overrides?: CallOverrides): Promise<BigNumber>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateGovernance(
    addr_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    VERSION(overrides?: CallOverrides): Promise<string>;

    admin(overrides?: CallOverrides): Promise<string>;

    initialize(
      admin_: PromiseOrValue<string>,
      serviceFeeNumerator_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    nonces(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    redeem(
      receipt_: ReceiptUtil.ReceiptStruct,
      signature_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    redeemBulk(
      receipt_: ReceiptUtil.BulkReceiptStruct,
      signature_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    serviceFeeNumerator(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(overrides?: CallOverrides): Promise<void>;

    updateGovernance(
      addr_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BulkRedeemed(address,address,uint256[],address,uint256)"(
      nftContract?: PromiseOrValue<string> | null,
      buyer?: PromiseOrValue<string> | null,
      tokenIds?: null,
      paymentToken?: null,
      total?: null
    ): BulkRedeemedEventFilter;
    BulkRedeemed(
      nftContract?: PromiseOrValue<string> | null,
      buyer?: PromiseOrValue<string> | null,
      tokenIds?: null,
      paymentToken?: null,
      total?: null
    ): BulkRedeemedEventFilter;

    "GovernanceUpdated(address)"(
      newAddr?: PromiseOrValue<string> | null
    ): GovernanceUpdatedEventFilter;
    GovernanceUpdated(
      newAddr?: PromiseOrValue<string> | null
    ): GovernanceUpdatedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "ItemRedeemed(address,address,uint256,address,uint256)"(
      nftContract?: PromiseOrValue<string> | null,
      buyer?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      paymentToken?: null,
      total?: null
    ): ItemRedeemedEventFilter;
    ItemRedeemed(
      nftContract?: PromiseOrValue<string> | null,
      buyer?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      paymentToken?: null,
      total?: null
    ): ItemRedeemedEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      admin_: PromiseOrValue<string>,
      serviceFeeNumerator_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    nonces(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    redeem(
      receipt_: ReceiptUtil.ReceiptStruct,
      signature_: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    redeemBulk(
      receipt_: ReceiptUtil.BulkReceiptStruct,
      signature_: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    serviceFeeNumerator(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateGovernance(
      addr_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      admin_: PromiseOrValue<string>,
      serviceFeeNumerator_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    nonces(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeem(
      receipt_: ReceiptUtil.ReceiptStruct,
      signature_: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    redeemBulk(
      receipt_: ReceiptUtil.BulkReceiptStruct,
      signature_: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    serviceFeeNumerator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateGovernance(
      addr_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
