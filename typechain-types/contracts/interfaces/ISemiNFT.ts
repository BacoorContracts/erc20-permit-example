/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface ISemiNFTInterface extends utils.Interface {
  functions: {
    "initialize(address,address,string,string,string)": FunctionFragment;
    "mint(uint256,uint256)": FunctionFragment;
    "mint(address,uint256,uint256,string)": FunctionFragment;
    "mintBatch(address,uint256[],uint256[],string[])": FunctionFragment;
    "mintBatch(uint256[],uint256[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "initialize"
      | "mint(uint256,uint256)"
      | "mint(address,uint256,uint256,string)"
      | "mintBatch(address,uint256[],uint256[],string[])"
      | "mintBatch(uint256[],uint256[])"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mint(uint256,uint256)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "mint(address,uint256,uint256,string)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintBatch(address,uint256[],uint256[],string[])",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintBatch(uint256[],uint256[])",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>[]]
  ): string;

  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mint(uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mint(address,uint256,uint256,string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintBatch(address,uint256[],uint256[],string[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintBatch(uint256[],uint256[])",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ISemiNFT extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ISemiNFTInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    initialize(
      admin_: PromiseOrValue<string>,
      owner_: PromiseOrValue<string>,
      name_: PromiseOrValue<string>,
      symbol_: PromiseOrValue<string>,
      baseURI_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "mint(uint256,uint256)"(
      tokenId_: PromiseOrValue<BigNumberish>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "mint(address,uint256,uint256,string)"(
      to_: PromiseOrValue<string>,
      tokenId_: PromiseOrValue<BigNumberish>,
      amount_: PromiseOrValue<BigNumberish>,
      tokenURI_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "mintBatch(address,uint256[],uint256[],string[])"(
      to_: PromiseOrValue<string>,
      tokenIds_: PromiseOrValue<BigNumberish>[],
      amounts_: PromiseOrValue<BigNumberish>[],
      tokenURIs_: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "mintBatch(uint256[],uint256[])"(
      tokenIds_: PromiseOrValue<BigNumberish>[],
      amounts_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  initialize(
    admin_: PromiseOrValue<string>,
    owner_: PromiseOrValue<string>,
    name_: PromiseOrValue<string>,
    symbol_: PromiseOrValue<string>,
    baseURI_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "mint(uint256,uint256)"(
    tokenId_: PromiseOrValue<BigNumberish>,
    amount_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "mint(address,uint256,uint256,string)"(
    to_: PromiseOrValue<string>,
    tokenId_: PromiseOrValue<BigNumberish>,
    amount_: PromiseOrValue<BigNumberish>,
    tokenURI_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "mintBatch(address,uint256[],uint256[],string[])"(
    to_: PromiseOrValue<string>,
    tokenIds_: PromiseOrValue<BigNumberish>[],
    amounts_: PromiseOrValue<BigNumberish>[],
    tokenURIs_: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "mintBatch(uint256[],uint256[])"(
    tokenIds_: PromiseOrValue<BigNumberish>[],
    amounts_: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    initialize(
      admin_: PromiseOrValue<string>,
      owner_: PromiseOrValue<string>,
      name_: PromiseOrValue<string>,
      symbol_: PromiseOrValue<string>,
      baseURI_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "mint(uint256,uint256)"(
      tokenId_: PromiseOrValue<BigNumberish>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "mint(address,uint256,uint256,string)"(
      to_: PromiseOrValue<string>,
      tokenId_: PromiseOrValue<BigNumberish>,
      amount_: PromiseOrValue<BigNumberish>,
      tokenURI_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "mintBatch(address,uint256[],uint256[],string[])"(
      to_: PromiseOrValue<string>,
      tokenIds_: PromiseOrValue<BigNumberish>[],
      amounts_: PromiseOrValue<BigNumberish>[],
      tokenURIs_: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    "mintBatch(uint256[],uint256[])"(
      tokenIds_: PromiseOrValue<BigNumberish>[],
      amounts_: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    initialize(
      admin_: PromiseOrValue<string>,
      owner_: PromiseOrValue<string>,
      name_: PromiseOrValue<string>,
      symbol_: PromiseOrValue<string>,
      baseURI_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "mint(uint256,uint256)"(
      tokenId_: PromiseOrValue<BigNumberish>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "mint(address,uint256,uint256,string)"(
      to_: PromiseOrValue<string>,
      tokenId_: PromiseOrValue<BigNumberish>,
      amount_: PromiseOrValue<BigNumberish>,
      tokenURI_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "mintBatch(address,uint256[],uint256[],string[])"(
      to_: PromiseOrValue<string>,
      tokenIds_: PromiseOrValue<BigNumberish>[],
      amounts_: PromiseOrValue<BigNumberish>[],
      tokenURIs_: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "mintBatch(uint256[],uint256[])"(
      tokenIds_: PromiseOrValue<BigNumberish>[],
      amounts_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    initialize(
      admin_: PromiseOrValue<string>,
      owner_: PromiseOrValue<string>,
      name_: PromiseOrValue<string>,
      symbol_: PromiseOrValue<string>,
      baseURI_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "mint(uint256,uint256)"(
      tokenId_: PromiseOrValue<BigNumberish>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "mint(address,uint256,uint256,string)"(
      to_: PromiseOrValue<string>,
      tokenId_: PromiseOrValue<BigNumberish>,
      amount_: PromiseOrValue<BigNumberish>,
      tokenURI_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "mintBatch(address,uint256[],uint256[],string[])"(
      to_: PromiseOrValue<string>,
      tokenIds_: PromiseOrValue<BigNumberish>[],
      amounts_: PromiseOrValue<BigNumberish>[],
      tokenURIs_: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "mintBatch(uint256[],uint256[])"(
      tokenIds_: PromiseOrValue<BigNumberish>[],
      amounts_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
