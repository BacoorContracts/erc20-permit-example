/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface TokenCreatorInterface extends utils.Interface {
  functions: {
    "ADDRESS_BIT()": FunctionFragment;
    "FEE_BIT()": FunctionFragment;
    "INDEX_BIT()": FunctionFragment;
    "SUPPLY_BIT()": FunctionFragment;
    "TYPE_BIT()": FunctionFragment;
    "createTokenId(uint256,uint256,uint256,uint256,address)": FunctionFragment;
    "getTokenCreator(uint256)": FunctionFragment;
    "getTokenIndex(uint256)": FunctionFragment;
    "getTokenMaxSupply(uint256)": FunctionFragment;
    "getTokenType(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ADDRESS_BIT"
      | "FEE_BIT"
      | "INDEX_BIT"
      | "SUPPLY_BIT"
      | "TYPE_BIT"
      | "createTokenId"
      | "getTokenCreator"
      | "getTokenIndex"
      | "getTokenMaxSupply"
      | "getTokenType"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ADDRESS_BIT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "FEE_BIT", values?: undefined): string;
  encodeFunctionData(functionFragment: "INDEX_BIT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "SUPPLY_BIT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "TYPE_BIT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createTokenId",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenCreator",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenIndex",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenMaxSupply",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenType",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "ADDRESS_BIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "FEE_BIT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "INDEX_BIT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "SUPPLY_BIT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "TYPE_BIT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenCreator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenMaxSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenType",
    data: BytesLike
  ): Result;

  events: {};
}

export interface TokenCreator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TokenCreatorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ADDRESS_BIT(overrides?: CallOverrides): Promise<[BigNumber]>;

    FEE_BIT(overrides?: CallOverrides): Promise<[BigNumber]>;

    INDEX_BIT(overrides?: CallOverrides): Promise<[BigNumber]>;

    SUPPLY_BIT(overrides?: CallOverrides): Promise<[BigNumber]>;

    TYPE_BIT(overrides?: CallOverrides): Promise<[BigNumber]>;

    createTokenId(
      _fee: PromiseOrValue<BigNumberish>,
      _type: PromiseOrValue<BigNumberish>,
      _supply: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      _creator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTokenCreator(
      id_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { addr: string }>;

    getTokenIndex(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { index: BigNumber }>;

    getTokenMaxSupply(
      id_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { supply: BigNumber }>;

    getTokenType(
      id_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { tokenType: BigNumber }>;
  };

  ADDRESS_BIT(overrides?: CallOverrides): Promise<BigNumber>;

  FEE_BIT(overrides?: CallOverrides): Promise<BigNumber>;

  INDEX_BIT(overrides?: CallOverrides): Promise<BigNumber>;

  SUPPLY_BIT(overrides?: CallOverrides): Promise<BigNumber>;

  TYPE_BIT(overrides?: CallOverrides): Promise<BigNumber>;

  createTokenId(
    _fee: PromiseOrValue<BigNumberish>,
    _type: PromiseOrValue<BigNumberish>,
    _supply: PromiseOrValue<BigNumberish>,
    _index: PromiseOrValue<BigNumberish>,
    _creator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTokenCreator(
    id_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getTokenIndex(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTokenMaxSupply(
    id_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTokenType(
    id_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    ADDRESS_BIT(overrides?: CallOverrides): Promise<BigNumber>;

    FEE_BIT(overrides?: CallOverrides): Promise<BigNumber>;

    INDEX_BIT(overrides?: CallOverrides): Promise<BigNumber>;

    SUPPLY_BIT(overrides?: CallOverrides): Promise<BigNumber>;

    TYPE_BIT(overrides?: CallOverrides): Promise<BigNumber>;

    createTokenId(
      _fee: PromiseOrValue<BigNumberish>,
      _type: PromiseOrValue<BigNumberish>,
      _supply: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      _creator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenCreator(
      id_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getTokenIndex(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenMaxSupply(
      id_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenType(
      id_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    ADDRESS_BIT(overrides?: CallOverrides): Promise<BigNumber>;

    FEE_BIT(overrides?: CallOverrides): Promise<BigNumber>;

    INDEX_BIT(overrides?: CallOverrides): Promise<BigNumber>;

    SUPPLY_BIT(overrides?: CallOverrides): Promise<BigNumber>;

    TYPE_BIT(overrides?: CallOverrides): Promise<BigNumber>;

    createTokenId(
      _fee: PromiseOrValue<BigNumberish>,
      _type: PromiseOrValue<BigNumberish>,
      _supply: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      _creator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenCreator(
      id_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenIndex(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenMaxSupply(
      id_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenType(
      id_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ADDRESS_BIT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    FEE_BIT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    INDEX_BIT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SUPPLY_BIT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TYPE_BIT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createTokenId(
      _fee: PromiseOrValue<BigNumberish>,
      _type: PromiseOrValue<BigNumberish>,
      _supply: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      _creator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenCreator(
      id_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenIndex(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenMaxSupply(
      id_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenType(
      id_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
