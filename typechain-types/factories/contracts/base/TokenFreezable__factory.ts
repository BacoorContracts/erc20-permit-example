/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  TokenFreezable,
  TokenFreezableInterface,
} from "../../../contracts/base/TokenFreezable";

const _abi = [
  {
    inputs: [],
    name: "TokenFreezable__FrozenBase",
    type: "error",
  },
  {
    inputs: [],
    name: "TokenFreezable__FrozenToken",
    type: "error",
  },
  {
    inputs: [],
    name: "TokenFreezable__Unauthorized",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId_",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "string",
        name: "tokenURI_",
        type: "string",
      },
    ],
    name: "PermanentURI",
    type: "event",
  },
  {
    inputs: [],
    name: "freezeBaseURI",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId_",
        type: "uint256",
      },
    ],
    name: "freezeToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "frozenTokens",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "isFrozenBase",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "baseURI_",
        type: "string",
      },
    ],
    name: "setBaseURI",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

export class TokenFreezable__factory {
  static readonly abi = _abi;
  static createInterface(): TokenFreezableInterface {
    return new utils.Interface(_abi) as TokenFreezableInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TokenFreezable {
    return new Contract(address, _abi, signerOrProvider) as TokenFreezable;
  }
}
