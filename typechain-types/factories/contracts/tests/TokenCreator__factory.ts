/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  TokenCreator,
  TokenCreatorInterface,
} from "../../../contracts/tests/TokenCreator";

const _abi = [
  {
    inputs: [],
    name: "ADDRESS_BIT",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "FEE_BIT",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "INDEX_BIT",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "SUPPLY_BIT",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "TYPE_BIT",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_fee",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_type",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_supply",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_creator",
        type: "address",
      },
    ],
    name: "createTokenId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id_",
        type: "uint256",
      },
    ],
    name: "getTokenCreator",
    outputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "getTokenIndex",
    outputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id_",
        type: "uint256",
      },
    ],
    name: "getTokenMaxSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "supply",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id_",
        type: "uint256",
      },
    ],
    name: "getTokenType",
    outputs: [
      {
        internalType: "uint256",
        name: "tokenType",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061024d806100206000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80639c0b7998116100665780639c0b799814610110578063afbf292614610110578063c73099bc14610118578063fb5100d114610154578063fbe25d0e1461015c57600080fd5b80630d992c4e146100a35780633a663c80146100be5780633e82f01c146100a357806376aed2e1146100d1578063934689a9146100e4575b600080fd5b6100ab601081565b6040519081526020015b60405180910390f35b6100ab6100cc3660046101a5565b61016f565b6100ab6100df3660046101a5565b610181565b6100f86100f23660046101a5565b60601c90565b6040516001600160a01b0390911681526020016100b5565b6100ab602081565b6100ab6101263660046101be565b60601b6bffffffffffffffffffffffff191660409290921b60309390931b60209490941b1792909217171790565b6100ab60a081565b6100ab61016a3660046101a5565b610192565b600063ffffffff8281165b0692915050565b600061ffff603083901c811661017a565b600063ffffffff604083901c811661017a565b6000602082840312156101b757600080fd5b5035919050565b600080600080600060a086880312156101d657600080fd5b8535945060208601359350604086013592506060860135915060808601356001600160a01b038116811461020957600080fd5b80915050929550929590935056fea2646970667358221220d060b65074e2670be0470a4fdd987d94c4b478ee71355e97dc202b74a4a04e5a64736f6c634300080f0033";

type TokenCreatorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TokenCreatorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TokenCreator__factory extends ContractFactory {
  constructor(...args: TokenCreatorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TokenCreator> {
    return super.deploy(overrides || {}) as Promise<TokenCreator>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TokenCreator {
    return super.attach(address) as TokenCreator;
  }
  override connect(signer: Signer): TokenCreator__factory {
    return super.connect(signer) as TokenCreator__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TokenCreatorInterface {
    return new utils.Interface(_abi) as TokenCreatorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TokenCreator {
    return new Contract(address, _abi, signerOrProvider) as TokenCreator;
  }
}
